type Query {
    postById(id: ID!): Post
    allPosts: [Post!]
    postsByUserId(id: ID!): [Post!]

    userById(id: ID!): User
    userByName(name: String!): User
    allUsers: [User!]

    allAlgorithms: [Algorithm!]!


    taskById(id: ID!): Task
    allTasks: [Task!]
}

type Mutation {
    addPost(userId: Int!, title: String!, message: String!): Post
    addAlgorithmPost(userId: Int!, title: String!, algorithm: String!, input: [Int!]!, error: String): Post
    removePost(id: ID!): ID

    addTask(algorithm: String!, input: [Int!]!): Task
    removeTask(id: ID!): ID!
    removeAllTasks: Boolean!

    isPrime(number: Int!): Boolean!
    bubbleSort(numbers: [Int!]!): [Int!]!
    quickSort(numbers: [Int!]!): [Int!]!
}

type User {
    id: ID!
    name: String!
    posts: [Post!]
}

type Post {
    id: ID!
    userId: Int!
    taskId: Int
    task: Task
    title: String!
    message: String!
}

type Task {
    id: ID!
    algorithm: String!
    input: [Int!]
    status: Status!
    result: String
}

type Algorithm {
    id: ID!
    name: String!
    displayName: String!
    inputMultiple: Boolean!
}

enum Status {
    DONE
    CALCULATING
    ERROR
}